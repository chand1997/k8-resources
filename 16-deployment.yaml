apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
  # labels of deployment.
  labels:
    tier: frontend
spec:
  replicas: 3  # number of pods
  selector:
  # labels of replica-set.
    matchLabels:
      tier: frontend

  # below is pod template/definition.
  template:
    metadata:
      labels:
  # labels of pod.
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

  # Pod is subset of ReplicaSet, ReplicaSet is subset of Deployment.

  # if we create "Deployment", it will automatically create "ReplicaSet",then ReplicaSet will create required pods.

  # And if there is any change in image, "Deployment" will automatically creates new pods and destroys old pods.


---

apiVersion: v1
kind: Service
metadata:
  name: deployment-lb
spec:
  type: LoadBalancer  
  selector:
    tier: frontend
  ports:
    - protocol: TCP
      port: 80 
      targetPort: 80
      nodePort: 30007   

# "kubectl rollout history deployment/<deployment-name>" 
    # this gives revision numbers, the highest is current running version/revision.

# "kubectl rollout history deployment/<deployment-name> --revision=<revision-number>"
   # gives more details about that particular revision(eg: which image is used ..etc)

# "kubectl rollout undo deployment/<deployment-name>" --> rollback to previous version/revision

# "kubectl rollout undo deployment/<deployment-name> --to-revision=<revision-number>" 
        # rollback to given version/revision

 #"kubectl rollout status deployment <deployment-name>" --> to check whether deployment rolled out or not.
   # gives o/p-->deployment "<deployment-name>" successfully rolled out

